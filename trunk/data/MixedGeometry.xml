<fieldml>
  <!-- 
  
  7---1---2---6
  |   |   |\ 3|
  | 4 | 1 |2\ |
  |   |   |  \|
  8---3---4---5
  
  
   -->

  <!--
      A vector domain contains an arbitrary number of components, only accessible via indexes or iteration.
      In order to ensure that the vector domain is homogeneous, each component must come from the same domain.
  -->
  <continuous_vector_domain id="node.parameters" component_domain="library::real" />
  
  <!--
      A discrete domain is a fixed collection of arbitrary values. The "index" type means that although the values
      are read as integers, it is not meaningful to perform mathematical operations on them. 
   -->
  <discrete_domain id="mesh.element" type="index">
    <component id="id">
      1  2  3
    </component>
  </discrete_domain>
  
  <discrete_domain id="mesh.node" type="index">
    <component id="id">
      1  2  3  4  5  6
    </component>
  </discrete_domain>
  
  <discrete_vector_domain id="element.nodes" component_domain="mesh.node" />
  
  <mapped_field id="element.shape" domain="to be decided">
    <map key_values="1,4">
        library::unit_square
    </map>
    <map key_values="2,3">
        library::unit_triangle
    </map>
  </mapped_field>
  
  <mesh id="mesh1" elements="mesh.element" element_shapes="element.shape" nodes="mesh.element_nodes" />
  
  <piecewise_field id="mesh.coordinates" mesh="mesh1" value_domain="library::cartesian_2d">
    <evaluate_piecewise component="x">
      <elements>  1  4
        <interpolated_value element_dof_list="mesh.element_nodes" dof_list="node.parameters" interpolation="library::bilinear_lagrange">
          0
        </interpolated_value>
      </elements>
      <elements>  2
        <interpolated_value element_dof_list="mesh.element_nodes" dof_list="node.parameters" interpolation="library::bilinear_simplex">
          0
        </interpolated_value>
      </elements>
      <elements>  3
        <constant_value>
          0.0
        </constant_value>
      </elements>
    </evaluate_piecewise>
    <evaluate_piecewise component="y">
      <elements>  1  4
        <interpolated_value element_dof_list="mesh.element_nodes" dof_list="node.parameters" interpolation="library::bilinear_lagrange">
          1
        </interpolated_value>
      </elements>
      <elements>  2
        <interpolated_value element_dof_list="mesh.element_nodes" dof_list="node.parameters" interpolation="library::bilinear_simplex">
          1
        </interpolated_value>
      </elements>
      <elements>  3
        <constant_value>
          0.0
        </constant_value>
      </elements>
    </evaluate_piecewise>
  </piecewise_field>

  <mapped_field id="node.parameters" key_domain="mesh.node" value_domain="node.parameters">
    <map key_values="1">
      0.0  1.0
    </map>
    <map key_values="2">
      1.0  1.0
    </map>
    <map key_values="3">
      0.0  0.0
    </map>
    <map key_values="4">
      1.0  0.0
    </map>
    <map key_values="5">
      2.0  0.0
    </map>
    <map key_values="6">
      2.0  1.0
    </map>
  </mapped_field>

  <mapped_field id="mesh.element_nodes" key_domain="mesh.element" value_domain="element.nodes">
    <map key_values="1">
        1  2  3  4
    </map>
    <map key_values="2">
        4  2  5
    </map>
    <map key_values="4">
        7  1  8  3
    </map>
  </mapped_field>
</fieldml>
