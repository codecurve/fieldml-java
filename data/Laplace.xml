<fieldml>
  <!--
    Produced by OpenCMISS, using the LaplaceExample project with a 4x4x0 mesh computed by 2 nodes. This file
    represents the first node's output.
   -->

  <discrete_domain id="mesh.element" value="index">
    <component id="id">
      3  4  7  8  11  12  15  16
    </component>
  </discrete_domain>
  
  <discrete_domain id="mesh.node" value="index">
    <component id="id">
      3  4  5  8  9  10  14  15  19  20  24  25
    </component>
  </discrete_domain>
  
  <continuous_domain id="element.parameters" value="real" >
    <component id="x" />
    <component id="y" />
    <component id="g" />
    <component id="n" />
  </continuous_domain>

  <discrete_domain id="mesh.element_nodes" value="index">
    <import_component id="node1" domain="mesh.node" component="id" />
    <import_component id="node2" domain="mesh.node" component="id" />
    <import_component id="node3" domain="mesh.node" component="id" />
    <import_component id="node4" domain="mesh.node" component="id" />
  </discrete_domain>

  <field id="element.x_values" value_domain="library::bilinear_interpolation_parameters">
    <!--
      For a single-parameter field:
      
      <mapped_parameter id="BAR" mapping_field="FOO" />
      
      is identical to
      
      <parameter id="TEMP" domain="FOO's parameter domain" />
      
      <derived_parameter id="BAR" field="FOO" parameter="TEMP" />
      
      note that TEMP is never referenced again.
     -->
    <mapped_parameter id="nodes" mapping_field="element.nodes" />
    
    <import_component field="node.parameters" component="x" >
      <parameter id="nodes" component="node1" />
    </import_component>
    <import_component field="node.parameters" component="x" >
      <parameter id="nodes" component="node2" />
    </import_component>
    <import_component field="node.parameters" component="x" >
      <parameter id="nodes" component="node3" />
    </import_component>
    <import_component field="node.parameters" component="x" >
      <parameter id="nodes" component="node4" />
    </import_component>
  </field>

  <field id="element.y_values" value_domain="library::bilinear_interpolation_parameters">
    <mapped_parameter id="nodes" mapping_field="element.nodes" />
    
    <import_component field="node.parameters" component="y" >
      <parameter id="nodes" component="node1" />
    </import_component>
    <import_component field="node.parameters" component="y" >
      <parameter id="nodes" component="node2" />
    </import_component>
    <import_component field="node.parameters" component="y" >
      <parameter id="nodes" component="node3" />
    </import_component>
    <import_component field="node.parameters" component="y" >
      <parameter id="nodes" component="node4" />
    </import_component>
  </field>

  <field id="element.g_values" value_domain="library::bilinear_interpolation_parameters">
    <mapped_parameter id="nodes" mapping_field="element.nodes" />
    
    <import_component field="node.parameters" component="g" >
      <parameter id="nodes" component="node1" />
    </import_component>
    <import_component field="node.parameters" component="g" >
      <parameter id="nodes" component="node2" />
    </import_component>
    <import_component field="node.parameters" component="g" >
      <parameter id="nodes" component="node3" />
    </import_component>
    <import_component field="node.parameters" component="g" >
      <parameter id="nodes" component="node4" />
    </import_component>
  </field>

  <field id="element.n_values" value_domain="library::bilinear_interpolation_parameters">
    <mapped_parameter id="nodes" mapping_field="element.nodes" />
    
    <import_component field="node.parameters" component="n" >
      <parameter id="nodes" component="node1" />
    </import_component>
    <import_component field="node.parameters" component="n" >
      <parameter id="nodes" component="node2" />
    </import_component>
    <import_component field="node.parameters" component="n" >
      <parameter id="nodes" component="node3" />
    </import_component>
    <import_component field="node.parameters" component="n" >
      <parameter id="nodes" component="node4" />
    </import_component>
  </field>

  <field id="mesh.coordinates" value_domain="library::cartesian_2d">
    <parameter id="element" domain="mesh.element" />
    <parameter id="xi" domain="library::unit_square" />
    
    <derived_parameter id="element_x" field="element.x_values">
      <parameter id="element" />
    </derived_parameter>
    <derived_parameter id="element_y" field="element.y_values">
      <parameter id="element" />
    </derived_parameter>

    <import_component id="x" field="library::bilinear_interpolation" component="value">
      <parameter id="element_x" />
      <parameter id="xi" />
    </import_component>

    <import_component id="y" field="library::bilinear_interpolation" component="value">
      <parameter id="element_y" />
      <parameter id="xi" />
    </import_component>

  </field>

  <field id="mesh.g" value_domain="library::infinite_line">
    <parameter id="element" domain="mesh.element" />
    <parameter id="xi" domain="library::unit_square" />

    <derived_parameter id="element_g" field="element.g_values" parameter="element" />

    <import_component id="value" field="library::bilinear_interpolation" component="value">
      <parameter id="element_g" />
      <parameter id="xi" />
    </import_component>
  </field>

  <field id="mesh.n" value_domain="library::infinite_line">
    <parameter id="element" domain="mesh.element" />
    <parameter id="xi" domain="library::unit_square" />

    <derived_parameter id="element_n" field="element.n_values" parameter="element" />

    <import_component id="value" field="library::bilinear_interpolation" component="value">
      <parameter id="element_n" />
      <parameter id="xi" />
    </import_component>
  </field>

  <field id="node.parameters" value_domain="node.parameters">
    <parameter id="node" domain="mesh.node" index_domain="true" />

    <value_map parameter="node" component="id">
      <map value="3">
        1.0000000000000000E+00   0.0000000000000000E+00   3.1972356254077172E+00  -5.3524942944527254E-07
      </map>
      <map value="4">
        1.5000000000000000E+00   0.0000000000000000E+00   3.6365212588612064E+00  -5.3524942966731714E-07
      </map>
      <map value="5">
        2.0000000000000000E+00   0.0000000000000000E+00   3.8050656639529055E+00   9.1764340634819641E-02
      </map>
      <map value="8">
        1.0000000000000000E+00   2.5000000000000000E-01   3.2333119188635906E+00  -4.6824431862851323E-01
      </map>
      <map value="9">
        1.5000000000000000E+00   2.5000000000000000E-01   3.6624772699266712E+00  -4.6824431862851257E-01
      </map>
      <map value="10">
        2.0000000000000000E+00   2.5000000000000000E-01   3.8587585611294335E+00  -5.7325184862691669E-01
      </map>
      <map value="14">
        1.5000000000000000E+00   5.0000000000000000E-01   3.7541981649838512E+00  -4.6824431862851390E-01
      </map>
      <map value="15">
        2.0000000000000000E+00   5.0000000000000000E-01   4.0337189461891123E+00  -5.7325184862691603E-01
      </map>
      <map value="19">
        1.5000000000000000E+00   7.5000000000000000E-01   3.8640888796308559E+00  -4.6824431862851279E-01
      </map>
      <map value="20">
        2.0000000000000000E+00   7.5000000000000000E-01   4.4352922105181323E+00  -5.7325184862691669E-01
      </map>
      <map value="24">
        1.5000000000000000E+00   1.0000000000000000E+00   3.7494245949541605E+00   1.2590685730495488E-01
      </map>
      <map value="25">
        2.0000000000000000E+00   1.0000000000000000E+00   5.4868641978000836E+00  -1.2488136854377663E-01
      </map>
    </value_map>
  </field>


  <!--
    It seems that fields defined over a discrete domain only need to be defined over a single
    domain, which in turn has a single component. While this prohibits 'nesting' value
    requirements (i.e. forcing the field to be a single-parameter field), it simplifies the
    associated API greatly. For a start, it allows the api to infer "domain 1, component 1"
    for assigning values.   
   -->
  <field id="element.nodes" value_domain="mesh.element_nodes">
    <parameter id="element" domain="mesh.element" index_domain="true"/>
    
    <value_map parameter="element" component="id">
      <map value="3">
          3  4  8  9
      </map>
      <map value="4">
          4  5  9  10
      </map>
      <map value="7">
          8  9  13  14
      </map>
      <map value="8">
          9  10  14  15
      </map>
      <map value="11">
          13  14  18  19
      </map>
      <map value="12">
          14  15  19  20
      </map>
      <map value="15">
          18  19  23  24
      </map>
      <map value="16">
          19  20  24  25
      </map>
    </value_map>
  </field>

</fieldml>
